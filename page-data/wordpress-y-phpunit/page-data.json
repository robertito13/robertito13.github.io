{"componentChunkName":"component---src-templates-post-js","path":"/wordpress-y-phpunit/","result":{"data":{"site":{"siteMetadata":{"url":"https://rvaccaro.com.ar"}},"markdownRemark":{"id":"3279ac77-5497-55fa-a393-b0c770b81171","html":"<p>PHPUnit es uno de los frameworks para test unitarios automáticos para PHP más usados y el elegido por los desarrolladores de Wordpress junto con QUnit para probar la plataforma. Para facilitar las pruebas, los desarrolladores han creado ya todo un conjunto de test y clases auxiliares que nos resultarán muy útiles en nuestro workflow.  </p>\n<h2>Instalación</h2>\n<p><strong>Primero</strong>, necesitamos instalar PHPUnit en su versión 6 ya que la 7 no es soportada por Wordpress. Hay distintas formas documentadas en el <a href=\"https://phpunit.de/getting-started/phpunit-6.html\">sitio del framework</a> y podemos elegir la que más se adapte a nuestro entorno.</p>\n<p><strong>Segundo</strong>, creamos una nueva base de datos separada para los tests porque que la suite va a borrar todos los datos de las tablas de la instalación donde se ejecute.</p>\n<p><strong>Tercero</strong>, no es necesario pero definitivamente es la mejor forma de manejar el entorno de pruebas vamos a instalar wp-cli. Nuevamente, hay <a href=\"https://make.wordpress.org/cli/handbook/installing/\">varías formas</a> de llevar adelante la tarea y va a depender de nuestro entorno el método que elijamos.</p>\n<p>Por mi parte, me ha dado mejores resultados la instalación recomendada: descargar el .phar, darle permisos de ejecución y ponerlo en una carpeta que esté en PATH.</p>\n<p><strong>Cuarto</strong>, nos situamos en la carpeta de la instalación de wordpress para utilizar las opciones del paquete scaffold de wp-cli para generar los archivos necesarios para instalar los tests según sea un plugin o un theme.</p>\n<p>wp scaffold plugin-tests <nombre plugin><br>\nwp scaffold theme-tests <nombre theme></p>\n<p><strong>Quinto</strong>, ejecutamos el archivo generado dentro de la carpeta del plugin/theme en el paso anterior para instalar el entorno de pruebas. Vamos a necesitar las credenciales y datos de acceso a la base de datos que creamos antes.</p>\n<p>bin/install-wp-tests.sh <nombre bbdd> <usuario> &#x3C;contraseña> <host></p>\n<p>Con esto queda todo listo para que empecemos a desarrollar nuestros tests y ponerlos en la carpeta homónima para que PHPUnit los encuentre.</p>\n<p>Para más información sobre los unit test en Wordpress estos artículos van a dar una idea de las posibilidades:</p>\n<ul>\n<li><a href=\"https://tfrommen.de/an-introduction-to-unit-testing-for-wordpress/\">An Introduction To Unit Testing</a> (Thorsten Frommen)</li>\n<li><a href=\"https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/\">Writing PHPUnit Tests</a> (Wordpress.org)</li>\n<li><a href=\"https://codesymphony.co/writing-wordpress-plugin-unit-tests/\">Writing WordPress Plugin Unit Tests</a> (codeSymphony)</li>\n<li><a href=\"https://premium.wpmudev.org/blog/unit-testing-wordpress-plugins-phpunit/\">Unit Testing WordPress Plugins with PHPUnit</a> (WPMU Dev)</li>\n<li><a href=\"https://pippinsplugins.com/unit-tests-for-wordpress-plugins-the-factory/\">Unit Tests for WordPress Plugins – The Factory</a> (Pippin’s Plugins)</li>\n</ul>","frontmatter":{"title":"Wordpress y PHPUnit","date":"August 15, 2018"}}},"pageContext":{"slug":"/wordpress-y-phpunit/","previous":{"fields":{"slug":"/patron-de-inyeccion-de-dependencias/","source":"posts"},"frontmatter":{"title":"Patrón de Inyección de Dependencias"}},"next":{"fields":{"slug":"/recursos-utiles-para-el-desarrollo-web/","source":"posts"},"frontmatter":{"title":"Recursos útiles para el desarrollo web"}}}}}