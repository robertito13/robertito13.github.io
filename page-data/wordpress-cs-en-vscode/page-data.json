{"componentChunkName":"component---src-templates-post-js","path":"/wordpress-cs-en-vscode/","result":{"data":{"markdownRemark":{"id":"5c10fea9-a923-516c-a406-1462fdc32bec","html":"<p>WordPress tiene recomendaciones sobre cómo se debe escribir el código tanto si es para el core como para plugins y themes e incluso para la documentación.</p>\n<p>Como hay una gran cantidad de aspectos tratados por estas reglas y, a veces, las mismas son contra intuitivas o por lo menos van en contra de los usos y costumbres es necesario incluir herramientas en nuestro workflow que nos obliguen a seguirlas y nos marquen cuando nos olvidemos.</p>\n<p>Primero, para todo el código en JavaScript trabajaremos con <a href=\"https://eslint.org/\">ESLint</a> y el plugin homónimo para VSCode. Primero instalamos el <a href=\"https://www.npmjs.com/package/eslint-config-wordpress\">paquete de reglas</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-config-wordpress</code></pre></div>\n<p>Si no tenemos instalado eslint globalmente también tendremos que instalarlo.</p>\n<p>Lo siguiente es crear el <a href=\"https://eslint.org/docs/user-guide/configuring\">archivo de configuración</a> y agregar lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber 0\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wordpress\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>En caso de trabajar en Windows y, dependiendo del editor y nuestra configuración, puede ser útil desactivar la regla que nos marca los saltos de línea incorrectos. WordPress espera que utilicemos <em>\\n</em> y Windows utiliza <em>\\r\\n</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber 0\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wordpress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Con esto estaría la configuración de ESLint, ahora pasamos a VSCode. Buscamos el plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a> y lo instalamos. Si no tenemos ninguna configuración u organización partícular debería funcionar out-of-the-box.</p>\n<p>En caso de necesitar tunear la configuración para indicar otros path o ajustes, en el Summary del plugin están detalladas todas las configuraciones necesarias.</p>\n<p>En lo que respecta a PHP la idea es utilizar <a href=\"https://github.com/squizlabs/PHP_CodeSniffer\">PHP Code Sniffer</a> y el plugin phpcs. Nuevamente, arrancamos instalando todo con Composer:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">composer require --dev squizlabs/php<span class=\"token punctuation\">\\</span>_codesniffer wp-coding-standards/wpcs</code></pre></div>\n<p>A continuación tenemos que indicarle a PHP Code Sniffer donde encontrar las reglas que instalamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./vendor/bin/phpcs --config-set installed<span class=\"token punctuation\">\\</span>_paths vendor/wp-coding-standards/wpcs</code></pre></div>\n<p>Ahora, en VSCode buscamos e instalamos el plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs\">phpcs</a> y lo configuramos ya sea a través de la interfaz o editando el settings.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber 0\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"phpcs.enable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"phpcs.standard\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WordPress-Core\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Con respecto al standard tenemos 4:</p>\n<ul>\n<li>WordPress-Core: Conjunto principal de reglas establecidos para codificar en PHP para WordPress.</li>\n<li>WordPress-Docs: Reglas que abarcan todo lo relacionado con la documentación de código PHP.</li>\n<li>WordPress-Extra: Un superconjunto que incluye a WordPress-Core y lo extiende agregando reglas que fomentan buenas prácticas que no están contempladas en los estándares de WordPress.</li>\n<li>WordPress: El superconjunto que incluye todos los ruleset antes mencionados.</li>\n</ul>\n<p>A menos que estemos contribuyendo directamente con WordPress me quedaría con el WordPress-Core o WordPress-Extra para evitarnos el rollo de la documentación que por momentos llega a ser barroca.</p>\n<p>Existen, también, reglas para la correcta escritura del HTML y los stylesheet. En el primer caso la recomendación oficial va por el uso del <a href=\"https://validator.w3.org/\">W3C Validator</a> y en el otro hay un conjunto de reglas para <a href=\"https://stylelint.io/\">stylelint</a> pero, por ahora, no lo utilicé nunca así que queda para otro momento esa parte.</p>","frontmatter":{"title":"WordPress CS en VSCode","date":"May 30, 2019"}}},"pageContext":{"slug":"/wordpress-cs-en-vscode/","previous":{"fields":{"slug":"/quitar-etiquetas-p-de-las-imagenes-en-wordpress/","source":"posts"},"frontmatter":{"title":"Quitar etiquetas p de las imágenes en WordPress"}},"next":null}}}