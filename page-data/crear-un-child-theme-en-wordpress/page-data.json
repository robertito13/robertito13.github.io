{"componentChunkName":"component---src-templates-blog-post-js","path":"/crear-un-child-theme-en-wordpress/","result":{"data":{"markdownRemark":{"id":"20b569d9-b874-53af-9ad7-f5009a21be61","html":"<p>La creación de un child theme nos da la posibilidad de adaptar un theme pre existente a nuestro gusto. Cambiar algunas fuentes, espaciado, colores e incluso funciones de un theme que nos gusta para no tener que escribirlo de cero.</p>\n<p>La principal ventaja de hacerlo a través de un child theme, en vez de modificar el theme original, radica en que cuando se actualice el theme original no perderemos nuestras modificaciones obteniendo así lo mejor de dos mundos, actualizaciones y personalización.</p>\n<p>Como desventaja, agregamos una capa más que tiene que ser ejecutada sobre el theme original lo que podría, aunque no debería, hacer más lenta la carga del sitio. Además, dependiendo de la profundidad de las modificaciones, puede ocurrir que una actualización del theme original entre en conflicto con el child theme pero, nuevamente, es raro que ocurra.</p>\n<p>El principio de funcionamiento de los child themes es que cualquier template que tengamos en nuestro theme, será ejecutado en vez del homónimo en el theme original. Es decir, si en nuestro child theme creamos un <strong>comments.php</strong>, este será ejecutado en vez del archivo incluido en el parent theme.</p>\n<p>La única excepción a esto son los archivos <strong>functions.php</strong> que ámbos serán ejecutados, primero el del child theme y luego el del parent.</p>\n<p>Para poder crear un child theme es necesario que el tema \"padre\" o parent esté instalado y tener acceso al directorio themes de tu sitio con permisos de escritura.</p>\n<p>Los pasos serían:</p>\n<ol>\n<li>Accede a la carpeta donde tienes alojado los themes.</li>\n<li>Crea una nueva carpeta donde se alojará tu child-theme. Si no se te ocurre ningun nombre, una buena opción es <em><nombre del theme original>-child</em></li>\n<li>Crea los archivos <em>functions.php</em> y <em>style.css</em></li>\n<li>Agrega el contenido mínimo a cada archivo</li>\n</ol>\n<p>/*\nTheme Name:   <nombre de nuestro theme>\nTheme URI:    <url>\nDescription:  &#x3C;descripción>\nAuthor:       <autor>\nAuthor URI:   <url-autor>\nTemplate:     <nombre de la carpeta del theme padre>\nVersion:      &#x3C;versión de nuestro theme>\nLicense:      <licencia>\nLicense URI:  <url de la licencia>\nText Domain:  <text domain>\n*/</p>\n<p>El nombre del theme tiene que ser único, no puede ser el mismo del parent.</p>\n<p>En template, va únicamente el nombre de la carpeta del theme para el que estamos creando el child.</p>\n<p>Al momento de elegir licencia es importante tener en cuenta que sea compatible con la licencia del tema original.</p>\n<p>Si no vamos a cambiar los strings del theme original, no hace falta especificar el text-domain.</p>\n<?php\nadd\\_action( 'wp\\_enqueue\\_scripts', 'my\\_theme\\_enqueue\\_styles' );\nfunction my\\_theme\\_enqueue\\_styles() {\n    wp\\_enqueue\\_style( '<parent-theme>', get\\_template\\_directory\\_uri() . '/style.css' );\n \n    wp\\_enqueue\\_style( 'child-style',\n        get\\_stylesheet\\_directory\\_uri() . '/style.css',\n        array( '<parent-theme>' ),\n        wp\\_get\\_theme()->get('Version')\n    );\n}\n\nEn los child themes **get\\_template\\_directory\\_uri()** nos devuelve el path al directorio del theme **original y get\\_stylesheet\\_directory\\_uri()** nos devuelve el path al directorio del child theme.\n\n¿Por qué cargamos el stylesheet del parent theme si ya lo hace este automáticamente? Porque los hooks, a menos que les indiquemos específicamente lo contrario, se ejecutan en el orden en que fueron cargados. Entonces, si no agregamos el stylesheet del parent theme en nuestro _functions.php_, este se va a cargar después del nuevo stylesheet haciendo que los cambios no se vean.\n\nEs importante que hagamos el enqueue del parent theme con el mismo handle que en el theme original para evitar que se cargue dos veces. Si estuviéramos extendiendo o modificando el theme Divi, habría que reemplazar parent-theme por divi-style. Este dato lo podemos encontrar en el propio **functions.php** del parent theme.\n\nAdemás, como se muestra en el ejemplo, es importante utilizar en el nombre de las funciones que creemos un prefijo único para evitar que colisionen con otras funciones del parent theme u otros plugins.\n\nUna vez cargados los archivos, y las modificaciones del caso, el theme aparecerá junto a los demás en la sección Apariencia. Es importante recordar que no podemos eliminar el parent theme mientras esté activo el child.\n","frontmatter":{"title":"Crear un child theme en Wordpress","date":"June 01, 2018"}}},"pageContext":{"slug":"/crear-un-child-theme-en-wordpress/","previous":{"fields":{"slug":"/errores-comunes-cuando-empezamos-a-utilizar-react/","source":"blog"},"frontmatter":{"title":"Errores comunes cuando empezamos a utilizar React"}},"next":{"fields":{"slug":"/entendiendo-frontend-hoy/","source":"blog"},"frontmatter":{"title":"Entendiendo Frontend hoy"}}}}}